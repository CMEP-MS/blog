{
  "hash": "053a5513cdd262e4176668c65685c64e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mapping follow-up\"\nauthor: \"Kim Cressman\"\ndate: \"2025-04-21\"\ncategories: [code, maps, learning]\nmessage: false\nwarning: false\ndraft: false\n---\n\n\n\nWithin 2 days of my [first post here](https://cmep-ms.github.io/blog/posts/2025-04-15%20Maps/), where I struggled with maps and avoided using `ggplot2` because I thought I had to turn my raster data into data frames first (thanks, chatGPT), I saw a post on LinkedIn about the [`tidyterra`](https://dieghernan.github.io/tidyterra/) package. The link to the specific post doesn't seem to work when I'm not logged in, but credit to Joachim Stork for talking about this package, which integrates `terra` with `ggplot2`.  \n\nI made a new faceted map, with labels everywhere I wanted them, within 20 minutes. I still want to figure out how to do a coarse binning of values, but I got a generally equivalent plot to the other packages, with all the labeling I wanted. I will note I've worked with `ggplot2` for so long that some of the theming that was simple for me would not have been simple if I was coming to this from scratch - so it's not necessarily that `ggplot2` is better than the others; it's just that I know it so it's better for *me*.  \n\nLoad the packages; read and trim the data the same way as before.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\nlibrary(rnaturalearth)\nlibrary(sf)\nlibrary(RColorBrewer)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyterra)\n\n\n# precip data ----\ndat_nc <- rast(here::here(\"data\",\n                          \"2025-04-15 precip\",\n                          \"prcp-1991_2020-monthly-normals-v1.0.nc\"))\n\ndat_monthly <- dat_nc[[grep(\"mlyprcp_norm\", names(dat_nc))]]\nnames(dat_monthly) <- month.abb\n\n# convert to inches\nmonthly_in <- dat_monthly / 25.4\n\n# crop to MS ----\n# ms from rnaturalearth\nms_rne <- ne_states(country = \"United States of America\", returnclass = \"sf\") |> \n    dplyr::filter(name == \"Mississippi\")\nms_rne <- sf::st_transform(ms_rne, crs(dat_monthly))\n\nmonthly_ms_in <- crop(monthly_in, ms_rne)\nmonthly_ms_in <- mask(monthly_ms_in, ms_rne)\n\n\n# msep outline ----\nmsep <- read_sf(here::here(\"data\",\n                           \"2025-04-15 precip\",\n                           \"MSEP_outline.shp\"))\nmsep <- st_transform(msep, crs(monthly_ms_in))\n```\n:::\n\n\n\n\n\nI made the faceted plot with `tidyterra::geom_spatraster()` and `facet_wrap(~lyr)`. It was super easy; and then I used `scale_fill_distiller()` to get my favorite palette from `RColorBrewer`.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot() +\n    geom_spatraster(data = monthly_ms_in) +\n    facet_wrap(~lyr) +\n    scale_fill_distiller(palette = \"GnBu\", direction = 1,\n                         na.value = NA) +\n    theme_minimal() +\n    theme(axis.text = element_blank(),\n          axis.ticks = element_blank(),\n          strip.background = element_rect(fill = NA,\n                                          color = NA),\n          strip.text = element_text(face = \"bold\")) +\n    labs(title = \"Monthly Precipitation Normals\",\n         subtitle = \"1991-2020 average\",\n         fill = \"Inches\")\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\nI've been removing axis text and tick marks a lot lately using `theme()`, but if you're not familiar with all the options, check out the [`ggThemeAssist`](https://github.com/calligross/ggthemeassist) package. It provides a point-and-click interface to spruce up your plots once you have a general one made, and returns the code to you.  \n\n\nOnce I had the general plot worked out, I added the MSEP's boundary. This is where things got a little tricky for me, because I wanted the line to show up as a legend - so I used `aes()` inside `geom_sf()` and then forced the color to be how I wanted it with `scale_color_manual()`. Then I had to use `labs()` to make sure there wasn't a title for that piece of the legend.  \n\nI wasn't sure if using `\\n` as a line break would actually work this way, but it did!  \n\nI had read in the layer with the `sf` package, so I used `geom_sf()` from `ggplot2` at first.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n    geom_sf(data = msep,\n                    fill = NA,\n                    linewidth = 0.7,\n                    aes(col = \"MSEP \\nboundary\"),\n                    show.legend = \"line\") +\n    scale_color_manual(values = c(\"MSEP \\nboundary\" = \"gray20\")) +\n    labs(col = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nAs I was putting this post together, I noticed that not only does `tidyterra` provide `geom_spatraster()`, but also `geom_spatvector()` - so I use that below. It comes out the same - which probably means I can use `terra` for all the data import? But I'll save that exploration for another time.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n    geom_spatvector(data = msep,\n                    fill = NA,\n                    linewidth = 0.7,\n                    aes(col = \"MSEP \\nboundary\"),\n                    show.legend = \"line\") +\n    scale_color_manual(values = c(\"MSEP \\nboundary\" = \"gray20\")) +\n    labs(col = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nThat's all for today - happy mapping!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}