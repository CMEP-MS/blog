{
  "hash": "ba78ac9a39bd16bcc5e437a312ecb492",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mapmaking\"\nauthor: \"Kim Cressman\"\ndate: \"2025-04-15\"\ncategories: [code, maps, learning]\nmessage: false\nwarning: false\ndraft: false\n---\n\n\n\nI have been on a quest to make maps of long-term precipitation averages in the Mississippi Sound Estuary Program's watershed. I've done some mapping using R, but the maps have always been ... points. The last month or so is the first time I've actually worked with raster data - and known what 'raster' meant, and how spatial data like this is stored. I had an easy-ish time making a map of annual precipitation total, because there's only one layer in the data. The complications arose when I wanted to make a faceted map, with a panel for each month.\n\nI know how to do this sort of thing in `ggplot`; in fact facets are one of the main things that led me to learn that package. But I didn't want to turn what seemed to be a large chunk of data into a large chunk of data frames just to use what I'm familiar with. There are packages for raster data; I decided to play with them.\n\nBelow, I'll go through some of the main functions I used - `plot()`, `image()`, `levelplot()`, and `tmap()`. The first two are super easy and work great with a single layer at a time. The latter two make faceting easier. Before I dig in though, some resources.\n\n# Resources\n\nI'm pretty new to geospatial data. I leaned on other people's materials a lot here. These are the ones I'll be turning to frequently in the future:\n\n-   [Geocomputation with R](https://r.geocompx.org \"Geocomputation with R\"), by Robin Lovelace, Jakub Nowosad, and Jannes Muenchow.\\\n-   [Making Maps with R](https://bookdown.org/nicohahn/making_maps_with_r5/docs/tmap.html \"Making Maps with R - tmap\"), by Nico Hahn. Link goes to the `tmap` chapter.\n\n# Data\n\n## Precipitation\n\nI downloaded precipitation normals from the National Weather Service, as provided by the [National Centers for Environmental Information](https://www.ncei.noaa.gov). The data file is almost 275 MB so is not here in GitHub, but if you'd like to play with the same data you can get it from the [Climate Normals product page](https://www.ncei.noaa.gov/products/land-based-station/us-climate-normals). Select 'Gridded Normals', scroll down past a couple of maps to a table with a bunch of links, and, in the '1991-2020 Monthly Normals' column, select 'Precipitation'.\n\nOr copy my version out of [google drive](https://drive.google.com/drive/folders/1SOYpSdXD-WNVKEUOp975UA54y2YLvzdK?usp=sharing). That link goes to a folder that has the data file as well as a pdf of metadata. The data file is `prcp-1991_2020-monthly-normals-v1.0.nc`.\n\n## Watershed boundary\n\nWe will probably find a better way to share the shapefile of the MSEP boundary, but for now if you want to use it, it is in [this google drive folder](https://drive.google.com/drive/folders/1zOfDsx5lxwIeRRDbqrB9V1o9Jl2S4X8d?usp=sharing).\n\n# Packages\n\nIf you need to install any or all of these, run the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"sf\")             # for most spatial tasks\ninstall.packages(\"terra\")          # for raster data\ninstall.packages(\"rnaturalearth\")  # for MS outline\ninstall.packages(\"rasterVis\")      # for various raster plotting functions\ninstall.packages(\"latticeExtra\")   # to add an sf layer to a levelplot\ninstall.packages(\"tmap\")           # for tmap functions\ninstall.packages(\"RColorBrewer\")   # for color palette\ninstall.packages(\"here\")           # for file paths\ninstall.packages(\"dplyr\")          # for filtering\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"ropensci/rnaturalearthhires\")\n```\n:::\n\n\n\nAnd get them loaded. I almost never load `here` as a library but rather call it inline when I need it. Because I'm not using `latticeExtra` much either I leave it out of my library calls.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(terra)\nlibrary(rnaturalearth)\nlibrary(rasterVis)\nlibrary(tmap)\nlibrary(RColorBrewer)\n```\n:::\n\n\n\n# Exploring the data\n\n## Loading and subsetting\n\nTurns out there are several ways to load and work with `.nc` data files. I found `terra::rast()` kept things simplest down the line.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_nc <- rast(here::here(\"data\",\n                          \"2025-04-15 precip\",\n                          \"prcp-1991_2020-monthly-normals-v1.0.nc\"))\n```\n:::\n\n\n\nPrinting `dat_nc` gives us some idea of what's in here. Notably, there are 85 layers - you can see this in the 2nd row of output, `dimensions`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 596, 1385, 85  (nrow, ncol, nlyr)\nresolution  : 0.04166666, 0.04166667  (x, y)\nextent      : -124.7083, -67, 24.5417, 49.37503  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84) \nsources     : prcp-1991_2020-monthly-normals-v1.0.nc:mlyprcp_norm  (12 layers) \n              prcp-1991_2020-monthly-normals-v1.0.nc:mlyprcp_std  (12 layers) \n              prcp-1991_2020-monthly-normals-v1.0.nc:mlyprcp_min  (12 layers) \n              ... and 12 more sources\nvarnames    : mlyprcp_norm (Monthly precipitation normals from monthly precipitation values) \n              mlyprcp_std (Standard deviation of monthly precipitation values of all input years for a given month) \n              mlyprcp_min (Minimum precipitation of monthly precipitation values of all input years for a given month) \n              ...\nnames       : mlypr~orm_1, mlypr~orm_2, mlypr~orm_3, mlypr~orm_4, mlypr~orm_5, mlypr~orm_6, ... \nunit        :  millimeter,  millimeter,  millimeter,  millimeter,  millimeter,  millimeter, ... \n```\n\n\n:::\n:::\n\n\n\nI've set the below chunk not to evaluate, but taking a look through the names shows me that not only are there monthly normals, but also standard deviations, mins, and maxes. Additionally, we get normals, sd, min, and max for 4 different seasons, AND annual values. There are also various layers with `flag` in them, which I assume refers to data quality.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(dat_nc)\n```\n:::\n\n\n\nFrom all of this, I can make smaller datasets for only the normal (long-term average) values. I'm also assigning month abbreviations as the layer names, for nicer facet titles.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_annual <- dat_nc[[\"annprcp_norm\"]]\ndat_monthly <- dat_nc[[grep(\"mlyprcp_norm\", names(dat_nc))]]\nnames(dat_monthly) <- month.abb\n```\n:::\n\n\n\n## plot and image\n\nAs I was working through various tutorials and options, `plot()` and `image()` kept coming up as the quickest, easiest ways to look at data. It turns out `image()` only shows one layer at a time, but it is great for single layers.\n\n### Annual normals\n\nHere is the annual data, mapped both ways. In case there was any question, we can see we are working with data from the entire country. `image()` uses different colors and seems like it may do more binning. It also does not have a legend by default, though one can be added.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dat_annual, main = \"plot()\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nimage(dat_annual, main = \"image()\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n\n\n### Monthly normals\n\n`plot()` is a quick easy way to see multiple layers. Note though - color scales are different in the different facets! You have to work with it if you want the same color scale across facets. (We'll get there in this post.)\n\n`image()` only shows one layer at a time. I assume this is the first, and you can of course specify.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dat_monthly)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nimage(dat_monthly)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n\n```{.r .cell-code}\nimage(dat_monthly[[4]], main = \"image(), layer 4\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-3.png){width=672}\n:::\n:::\n\n\n\n# Subset and convert\n\nI'm most interested in precipitation in the state of Mississippi, so had to learn how to crop (and mask!) raster images. I didn't know it took two steps but it seems to. I'm also converting from millimeters to inches for an easier sense of scale.\n\n## convert to inches\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannual_in <- dat_annual / 25.4\nmonthly_in <- dat_monthly / 25.4\n```\n:::\n\n\n\n## get the MS boundary\n\nIn my explorations, I also came across multiple ways to get state boundaries. `USAboundaries` is a useful package but didn't play nice with all my mapping attempts - certain packages need certain explicitly spatial data types and I didn't know how to convert what I got from `USAboundaries`. I'm sure it can be done. But I had also used `rnaturalearth` so I went back to that.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nms_rne <- ne_states(country = \"United States of America\", returnclass = \"sf\") |> \n    dplyr::filter(name == \"Mississippi\")\n```\n:::\n\n\n\nThe spatial extent and coordinate reference system can be investigated. I don't show the output here, only the functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\next(ms_rne)\ncrs(ms_rne)\n```\n:::\n\n\n\nAlso make sure it generally looks right:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(ms_rne))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nYep, that looks like Mississippi!\n\nI know from all my other playing that both `ms_rne` and my raster files are referenced to WGS-84, but just in case, I'll go ahead and transform.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nms_rne <- sf::st_transform(ms_rne, crs(dat_annual))\n```\n:::\n\n\n\n## crop and mask\n\nGetting the raster data into the shape of MS takes two steps. `crop()` makes a rectangle based on the bounding box of what you're trying to crop to, and `mask()` gets it into the right shape. You could also do it in the reverse order - if you use `mask()` first, you see colors in the shape of the state but the entire plot region still covers the entire US.\n\nHere, I'll show you, because I needed to see it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mask(annual_in, ms_rne), main = \"mask() only\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(crop(annual_in, ms_rne), main = \"crop() only\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n:::\n\n\n\nSo we'll do both! First with the annual data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannual_ms_in <- crop(annual_in, ms_rne)\nannual_ms_in <- mask(annual_ms_in, ms_rne)\nplot(annual_ms_in)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nAnd now with monthly:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_ms_in <- crop(monthly_in, ms_rne)\nmonthly_ms_in <- mask(monthly_ms_in, ms_rne)\nplot(monthly_ms_in)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n### Also pull in MSEP boundary\n\nWe don't want to crop the raster data to the MSEP boundary, but will want to overlay the boundary on the other maps. So I'll read it in and make sure the CRS matches the other spatial files.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsep <- read_sf(here::here(\"data\",\n                           \"2025-04-15 precip\",\n                           \"MSEP_outline.shp\"))\nmsep <- st_transform(msep, crs(annual_ms_in))\n\n# for latticeExtra::layer and sp.polygons\nmsep_sp <- as_Spatial(st_geometry(msep))\n```\n:::\n\n\n\nNow the data's in good shape, and it's just about making it look nice.\n\n# Maps!\n\nHonestly, I messed around a LOT before I got nice-looking maps. At one point, I was following a tutorial that had me turn the raster data into a matrix, and I didn't know how to associate lat and long properly, so I made an upside-down map of the US. The color palette was awesome though!\n\nSo what I'll do here is show the output using all the defaults of different functions, and then I'll just jump to the ones I got looking the nicest.\n\n## Annual normals\n\nOkay, all defaults *except* that in `levelplot()` I'm setting marginal distributional plots to `FALSE` because they just take up too much space and aren't meaningful here.\n\nAnd `levelplot()` doesn't seem to want to be in a row with the others, so it gets its own panel completely.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# put three plots in a row\npar(mfrow = c(1, 2))\n# make the maps\nplot(annual_ms_in, main = \"plot()\")\nimage(annual_ms_in, main = \"image()\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# go back to normal\npar(mfrow = c(1, 1))\n\n# make the levelplot\nlevelplot(annual_ms_in, margin = FALSE, main = \"levelplot()\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n:::\n\n\n\n### With a uniform color palette and MSEP boundary\n\nWhen I actually looked through the help file for `levelplot()` (imagine that!), I found some examples of making your own theme. That simplified my code a TON. This will get re-used in the monthly plots.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_colors <- 9\nmyPal <- RColorBrewer::brewer.pal('GnBu', n=n_colors)\nmyTheme <- rasterTheme(region = myPal)\n```\n:::\n\n\n\n#### plot()\n\nThis makes a nice map, but I got tripped up on spacing and legends. I couldn't manage to make a good legend for the MSEP boundary or figure out how to make a title for the default legend. Sounds silly, but when it ends up being easier with other packages, you just do it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(annual_ms_in,\n     col = myPal,\n     main = \"Average Annual Precipitation (in), 1991–2020\")\nplot(st_geometry(msep), add = TRUE, col = NA, border = \"gray20\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n#### image()\n\nThis is probably my favorite of the annual precipitation maps.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage(annual_ms_in,\n      col = myPal,\n      main = \"Average Annual Precipitation\\n1991-2020\",\n      axes = FALSE,\n      xlim = c(-91.5, -86.5))\n# give it an outline\nbox()\n# add MSEP boundary\nplot(st_geometry(msep), add = TRUE, col = NA, border = \"gray20\", lwd = 2)\n# Add legends\n# first define the range of values\nval_range <- range(values(annual_ms_in), na.rm = TRUE)\nlegend(\"topright\", \n       legend = round(seq(val_range[1], val_range[2], length.out = n_colors)),\n       fill = myPal[seq(1, n_colors, length.out = n_colors)], \n       title = \"Inches\")\nlegend(\"bottomright\",\n       legend = \"MSEP \\nBoundary\", \n       col = \"gray20\", \n       lwd = 2, \n       bty = \"n\", \n       cex = 0.8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n#### levelplot()\n\nI couldn't figure out the MSEP boundary legend thing with this either, though I did manage to make a legend title and give it smaller text than the default.\n\nThis is where `latticeExtra` pops up - it's needed to add the polygon layer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevelplot(annual_ms_in,\n          par.settings = myTheme,\n          main = \"Average Annual Precipitation\\n1991–2020\",\n          colorkey = list(title = list(\"inches\",\n                                       fontsize = 9),\n                          space = \"right\"),\n          margin = FALSE,\n          xlab = NULL,\n          ylab = NULL,\n          scales = list(\n              x = list(draw = FALSE), \n              y = list(draw = FALSE)  \n          )\n) +\n    latticeExtra::layer(sp::sp.polygons(msep_sp))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Monthly Normals\n\nI didn't mess around too much before landing on a couple options that worked, so I'll jump straight to those here.\n\n### plot()\n\nI gave up on this function pretty quickly because an AI tool told me the `zlim` line should make the color scale the same in all facets, and it did NOT. I gave up before trying to add the MSEP boundary.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_min <- min(values(monthly_ms_in), na.rm = TRUE)\nglobal_max <- max(values(monthly_ms_in), na.rm = TRUE)\n\nplot(monthly_ms_in,\n     col = myPal,\n     zlim = c(global_min, global_max))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n### levelplot()\n\nThis worked pretty well in the end. I almost think the colors are *too* continuous though - it's almost easier to see the changes when you only have a few bins and it's all coarser. I couldn't quite figure it out with this one, but it is pretty nice otherwise.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevelplot(monthly_ms_in,\n          par.settings = myTheme,\n          layout = c(4, 3),  # 4 columns x 3 rows\n          main = \"Average Precipitation by Month\\n1991–2020\",\n          colorkey = list(title = list(\"inches\",\n                                       fontsize = 8),\n                          space = \"bottom\"),\n          margin = FALSE,\n          xlab = NULL,\n          ylab = NULL,\n          scales = list(\n              x = list(draw = FALSE),  \n              y = list(draw = FALSE)   \n          )\n) +\n    latticeExtra::layer(sp::sp.polygons(msep_sp))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n### tmap\n\nThe `tmap` package lets you make both static and interactive maps (fun!). Here we set the mode to `plot` to be static, and then add layers in a similar way to how `ggplot2` works. It was really quite simple to get here using `tmap` - I had a much easier time than I did with `levelplot()` and this will probably be my go-to in the future.\n\nAs with `levelplot()`, I would prefer a coarser binning of values, but that's probably doable with more time. And as with most of the others, I haven't figured out how to add a legend saying that the line in the middle of the state is the MSEP boundary. Again, I'm sure it's possible and I just need to put more time in.\n\nI'd still like to tinker on smaller things too - for example, making the facet labels have a white background. I suspect that's pretty easy, but I'm sort of at the end of my brainpower here, so this is good enough for now.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\n# start with the raster data and layer\ntm_shape(monthly_ms_in) +\n    tm_raster(col.scale = tm_scale_continuous(values = \"brewer.gn_bu\"),\n              col.free = FALSE,  # make the colors the same in every facet\n              col.legend = tm_legend(title = \"Inches\",\n                                     position = tm_pos_out(\"right\"))) +\n    # add the MSEP boundary\n    tm_shape(msep) +\n    tm_borders(col = \"black\", lwd = 2) +\n    # change the layout\n    tm_facets(ncol = 4, nrow = 3) +\n    tm_title(\"Average Precipitation by Month\\n1991–2020\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n# Recap\n\nThere are several great options for making nice maps in R! It can get overwhelming, but ultimately the differences are just in how easy it is for you to tweak details in the way that you need.\n\nI definitely learned some things about rainfall in Mississippi too. I already knew we get more rain on an annual basis than the northern parts in the state, and I had *read* that the seasonal patterns were different. But by making these gazillion maps I actually saw what those differences are. The coast gets the most rain in summer - June through August - and the rest of the state seems to be rainiest from about December through April.\n\nThis was a very long post; if you made it this far, thanks for reading! I hope this exploration helps somebody else in their learning journey.  \n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}